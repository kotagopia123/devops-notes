# functions:
#============

#!/bin/bash

hello() {
    echo "Hello!"
}

hello
hello
hello

--------------------------------------------------

#!/bin/bash

hello() {
    echo "Hello!"
    now
}

now() {
    echo "It's $(date +%r)"
}

hello
---------------------------------------------------

#!/bin/bash

hello() {
    echo "Hello!"
    now
}

hello

now() {
    echo "It's $(date +%r)"
}
--------------------------------------------------

#!/bin/bash

hello() {
    echo "Hello $1"
}

hello rns
--------------------------------------------------

#!/bin/bash

hello() {
    for NAME in $@
    do
        echo "Hello $NAME"
    done
}

hello rns rns1 rns2
-----------------------------------------------------

#!/bin/bash

my_function() {
    echo "$GLOBAL_VAR"
}

GLOBAL_VAR=1
my_function



------------------------------------------------------
#!/bin/bash

my_function() {
    echo "$GLOBAL_VAR"
}

my_function
GLOBAL_VAR=1
------------------------------------------------------

#!/bin/bash

my_function() {
    GLOBAL_VAR=1
}

echo "GLOBAL_VAR value BEFORE my_function called: $GLOBAL_VAR"

my_function


echo "GLOBAL_VAR value AFTER my_function called: $GLOBAL_VAR"

--------------------------------------------------------

#!/bin/bash

my_function() {
    local LOCAL_VAR=1
    echo "LOCAL_VAR can be accessed inside of the function: $LOCAL_VAR"
}

my_function

echo "LOCAL_VAR can NOT be accessed outside of the function: $LOCAL_VAR"

----------------------------------------------------------

#!/bin/bash

backup_file () {
  # This function creates a backup of a file.

  # Make sure the file exists.
  if [ -f "$1" ] 
  then
    # Make the BACKUP_FILE variable local to this function.
    local BACKUP_FILE="/tmp/$(basename ${1}).$(date +%F).$$"
    echo "Backing up $1 to ${BACKUP_FILE}"

    # The exit status of the function will be the exit status of the cp command.
    cp $1 $BACKUP_FILE
  else
    # The file does not exist, so return an non-zero exit status.
    return 1
  fi
}

# Call the function
backup_file /etc/hosts

# Make a decision based on the exit status of the function.
# Note this is for demonstration purposes.  You could have
# put this functionality inside of the backup_file function.
if [ $? -eq "0" ]
then
  echo "Backup succeeded!"
else
  echo "Backup failed!"
  # Abort the script and return a non-zero exit status.
  exit 1
fi

-----------------------------------------------------------
